version: '3.8'
name: data-science-project

x-logging: &default-logging
  driver: json-file
  options:
    max-size: "10m"
    max-file: "3"

services:
  nginx:
    image: nginx:latest
    container_name: nginx-web-server
    ports:
      - "80:80"
    volumes:
      - ./nginx/html:/usr/share/nginx/html
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - nginx-logs:/var/log/nginx
    networks:
      - web-network
    restart: always
    depends_on:
      - mysql
    logging: *default-logging
    env_file:
      - ./nginx/.env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 30s
      retries: 3
    labels:
      - "project=data-science"
      - "service=webserver"
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: 256M

  mysql:
    image: mysql:8.0
    container_name: mysql-database
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: mydatabase
      MYSQL_USER: datauser
      MYSQL_PASSWORD: datapassword
      TZ: Asia/Jakarta
    ports:
      - "3307:3306"
    volumes:
      - mysql-data:/var/lib/mysql
      - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
      - mysql-backup:/backup
    networks:
      - web-network
    restart: always
    logging: *default-logging
    env_file: 
      - ./mysql/.env
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "project=data-science"
      - "service=database"
    configs:
      - source: mysql-config
        target: /etc/mysql/conf.d/custom.cnf
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
    command: 
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci

  redis:
    image: redis:latest
    container_name: redis-server
    ports:
      - "6379:6379"
    networks:
      - web-network
    volumes:
      - redis-data:/data
    restart: always
    logging: *default-logging
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis-gui:
    image: rediscommander/redis-commander:latest
    container_name: redis-gui
    environment:
    - REDIS_HOSTS=local:redis:6379
    ports:
      - "8001:8001"
      - "8081:8081"
    networks:
      - web-network
    volumes:
      - redis-gui-data:/db
      
    depends_on:
      - redis
    restart: always

  elasticsearch:
    image: elasticsearch:8.11.3
    container_name: search-engine
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
      # - "9300:9300"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - web-network
    restart: always
    logging: *default-logging
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: message-queue
    environment:
      RABBITMQ_DEFAULT_USER: mquser
      RABBITMQ_DEFAULT_PASS: mqpassword
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - web-network
    restart: always
    logging: *default-logging
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.75'
          memory: 256M

  kibana:
    image: kibana:8.11.3
    container_name: visualization-dashboard
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_HOSTS=http://search-engine:9200
    ports:
      - "5601:5601"
    networks:
      - web-network
    depends_on:
      - elasticsearch
    restart: always
    logging: *default-logging

networks:
  web-network:
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1450

volumes:
  nginx-logs:
    driver: local
  mysql-data:
    driver: local
  mysql-backup:
    driver: local
  redis-data:
    driver: local
  redis-gui-data:
    driver: local
  rabbitmq-data:
    driver: local
  elasticsearch-data:
    driver: local

configs:
  mysql-config:
    file: ./mysql/custom.cnf